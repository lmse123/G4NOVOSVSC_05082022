/// \file NovoDetectorConstruction.hh
/// \brief Definition of the NovoDetectorConstruction class
//
//
#ifndef NovoDetectorConstruction_H
#define NovoDetectorConstruction_H 1

class NovoScintPillar;
class NovoPhotocatSD;
class NovoScintSD;

#include "G4Material.hh"
#include "G4VisAttributes.hh"
#include "G4RotationMatrix.hh"
#include "G4VUserDetectorConstruction.hh"
#include "G4Cache.hh"
#include "G4MaterialPropertiesTable.hh"

//#include "NovoPhotocatSD.hh"
#include "NovoScintPillar.hh"

class G4LogicalVolume;
class G4VPhysicalVolume;
class G4Box;



class NovoDetectorConstruction : public G4VUserDetectorConstruction
{
	public:
		NovoDetectorConstruction();
		virtual ~NovoDetectorConstruction();
	
		virtual G4VPhysicalVolume* Construct();
		virtual void ConstructSDandField();
		
		// Getters
		G4double GetScintX(){return fScint_x;}
		G4double GetScintY(){return fScint_y;}
		G4double GetScintZ(){return fScint_z;}
		
		// Set geomentical dimensions
		void SetDimensions(G4ThreeVector dim);
		void SetDefaults();
		
	private:
		void DefineMaterials();
		G4VPhysicalVolume* ConstructDetector();
		
		// World
		G4Box* fWorldBox;
		G4LogicalVolume* fWorldLog;
		G4VPhysicalVolume* fWorldPhys;
		
		// Materials and elements
		G4Element* fC;
		G4Element* fH;
		G4Element* fN;
		G4Element* fO;
		G4Material* fVacuum;
		G4Material* fAir;
		G4Material* fStilbene;
		G4Material* fGlass;	
		G4Material* fAl;
		G4Material* fSilicon;
		
		// Geometry
		G4double fScint_x;
		G4double fScint_y;
		G4double fScint_z;
		
		G4MaterialPropertiesTable* fVacuumMPT;
		G4MaterialPropertiesTable* fStilbeneMPT;	
		G4MaterialPropertiesTable* fGlassMPT;	
		
		G4int fNScintX;
		G4int fNScintY;
		G4int fNScint;
		
		//~ NovoScintPillar* fScintPillar;
		//~ NovoScintPillar* fScintPillar2;
		std::vector<NovoScintPillar*> fScintPillars;
		G4Cache<NovoPhotocatSD*> fPhotcat_SD;
		G4Cache<NovoScintSD*> fScint_SD;	
	
};


#endif
